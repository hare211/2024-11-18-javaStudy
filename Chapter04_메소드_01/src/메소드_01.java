/*
 * 	1. 객체 지향 프로그램
 * 		기능별 분리해서 클래스와 클래스 간의 연결해서 처리
 * 									--------- 메소드
 * 		=> 조립식
 * 		예) 컴퓨터
 * 			CPU / HDD / Display / Memory ...
 * 			--------------------------------- 클래스
 * 			메인보드에 조립
 * 			-----------
 * 	=> 클래스
 * 		1) 사용자 정의 데이터형 => 데이터형 클래스
 * 								---------
 * 								=> 관련된 데이터를 모아서 관리
 * 								=> ~VO, ~DTO
 * 		2) 한 개의 기능 (메소드) => 액션 클래스
 * 								=> 데이터를 활용하는 메소드
 * 								=> ~DAO, ~Model
 * 	=> JSP => 사라지는 경향
 * 	=> Front / Back
 * 		|		|
 * 				Spring - Boot
 * 		VueJS => 소규모
 * 		ReactJS => 대규모 => 최적화 : NextJS
 * Class ClassName {
 * 	구성요소
 * 	------------------------------------------
 * 		변수 : 멤버변수, 공유변수 => 다른 클래스에서 사용 가능
 * 		기본형(정수, 실수, 논리, 문자, 문자열, 배열)
 * 	------------------------------------------
 * 		생성자 : 멤버변수 초기화, 시작과 동시에 처리 기능
 * 				=> 자동 로그인, 데이터 베이스 연결
 * 				=> 서버 연결
 * 				=> 메모리 저장 시 호츌
 * 	------------------------------------------
 * 			**기능 설계 => 메소드
 * 	------------------------------------------
 * }
 * 	메소드
 * 		=> 정의 : 한 개의 기능을 수행하는 명령문의 집합
 * 				---------------
 * 				=> 조립 : process()
 * 				=> main 에서 코딩 하지 않는다
 * 					=> process() 만 호출
 * 				=> 로그인 처리 / 회원 가입 / 회원 수정 / 회원 탈퇴..
 * 				=> 목록 / 글쓰기 / 상세보기 / 수정 / 삭제 / 검색
 * 		=> 1. 반복적인 문장이 있는 경우 (반복 제거)
 * 			예)
 * 				오라클 연결
 * 				--------
 * 				목록 읽기 기능
 * 				--------
 * 				오라클 연결
 * 				목록 읽기
 * 				오라클 닫기 => 메소드
 * 				--------
 * 
 * 				글쓰기
 * 				--------
 * 				오라클 연결
 * 				글쓰기
 * 				오라클 닫기
 * 				--------
 * 		=> 2. 명령문을 기능별 분리 => 단락을 나눠서 처리
 * 				= 가독성 : 보기가 편리하다 (소스가 간결하다)
 * 				= 유지보수 : 수정이 용이
 * 				= 재사용 : 어떤 클래스에서든 필요 시마다 사용이 가능
 * 					Math.random() System.out.println()
 * 				= 최적화
 * 			-------------------------------------------
 * 			데이터 저장 => 저장된 데이터 가공 => 가공된 데이터 출력
 * 				|				|
 * 				변수			연산자 / 제어문
 * 				배열			------------
 * 							묶어서 처리 => 메소드
 * 	---------------------------------------------------
 * 
 * 	메소드 => 사용 할 때 (호출)
 * 			호출이 되면 메소드 처음부터 수행 => 다시 호출된 위치로 복귀
 * 
 * 	메소드 구성요소
 * 	1) 결과값 : 사용자 요청에 따라 결과값 추출 (리턴형)
 * 		Math.random() => 난수 추출
 * 	2) 사용자 요청 : 매개변수
 * 		예) 로그인 -> id, pw
 * 			+ => 정수, 정수
 * 				아이디 중복 체크 => id
 * 	3) 메소드명 => 기능에 맞게 이름부여
 * 				=> plus(), minus()...
 * 				=> 변수 식별자와 동일
 * 					1) 알파벳, 한글 => 알파벳 대소문자 구분
 * 					2) 숫자 사용 가능 => 앞에 사용 할 수 없다
 * 					3) 키워드는 사용이 불가능
 * 					4) 특수문자 사용 => $, _
 * 					5) 공백이 있으면 안된다
 * 					6) 문법 사항은 아니다 => 소문자로 시작
 * 	메소드 형식 : 선언부 / 구현부
 * 
 * 	[접근지정어] [옵션] 리턴형 메소드명 (매개변수...) // 선언부 {
 * 	---------  ---- ----
 * 				|	| 기본형 | 배열 | 클래스 => 결과값은 반드시 1 개
 * 				static | final | abstract
 * 				------	 -----	 --------
 * 				|자동 메모리 저장|종단	|선언만
 * 	public | private | protected | default
 * 	|			|		|			|
 * 									같은 풀더
 * 						같은 풀더 | 상속
 * 
 * 				자신의 클래스
 * 	모든 클래스
 * 		구현부
 * 		return 값 => 결과값
 * 	}
 * 
 * 	------------------------------------------
 * 			리턴형			매개변수
 * 	------------------------------------------
 * 			O				X
 * 	------------------------------------------
 * 			O				X
 * 	------------------------------------------
 * 			X				O
 * 	------------------------------------------
 * 			X				X
*/
public class 메소드_01 {

}














